/*
 * Copyright (C) 2009-2011, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

/// \file libport/cassert
/// \brief Provide nice assert-like macros.

#ifndef LIBPORT_CASSERT
# define LIBPORT_CASSERT

# include <cassert>
# include <iostream> // std::cerr
# include <libport/cerrno>
# include <libport/compiler.hh>
# include <libport/config.h>
# include <libport/cstdlib>
# include <libport/cstring> // libport::strerror.

/*-------------------------.
| LIBPORT_ASSERT_VERBOSE.  |
`-------------------------*/

// Remove abort messages only if the compilation mode space is enabled.
# ifndef LIBPORT_ASSERT_VERBOSE
#  if defined LIBPORT_COMPILATION_MODE_SPACE
#   define LIBPORT_ASSERT_VERBOSE 0
#  else
#   define LIBPORT_ASSERT_VERBOSE 1
#  endif
# endif


/*--------------.
| ASSERT_ECHO.  |
`--------------*/

# if LIBPORT_ASSERT_VERBOSE
#  define ASSERT_ECHO(File, Line, Message)                      \
  std::cerr << File << ":" << Line << ": " << Message << std::endl
# else
#  define ASSERT_ECHO(File, Line, Message)      \
  (void) 0
# endif


/*---------------------------------------------------.
| enforce: like assert, but not disabled by NDEBUG.  |
`---------------------------------------------------*/

namespace libport
{
  inline
  bool
  enforce_(const char* file, int line, bool exp, const std::string& msg)
  {
    if (!exp)
      fabort("%s:%s: failed assertion: %s", file, line, msg);
    return true;
  }

  template <typename T1>
  bool
  enforce_(const char* file, int line, bool exp, const std::string& msg,
           const T1& t1)
  {
    if (!exp)
      fabort("%s:%s: failed assertion: %s: %s", file, line, msg, t1);
    return true;
  }

  template <typename T1>
  bool
  enforce_(const char* file, int line, bool exp, const std::string& assertion,
           const std::string& msg,
           const T1& t1)
  {
    if (!exp)
      fabort("%s:%s: failed assertion: %s: %s",
             file, line, assertion,
             libport::format(msg, t1));
    return true;
  }

  template <typename T1, typename T2>
  bool
  enforce_(const char* file, int line, bool exp, const std::string& assertion,
           const std::string& msg,
           const T1& t1, const T2& t2)
  {
    if (!exp)
      fabort("%s:%s: failed assertion: %s: %s",
             file, line, assertion,
             libport::format(msg, t1, t2));
    return true;
  }
}

#  define enforce(Exp, ...)                                             \
  libport::enforce_(__FILE__, __LINE__ , likely(Exp), #Exp, ##__VA_ARGS__)


/*-------------------------------------------------------------------.
| aver -- Same as "libport::assert", to work around the fact that it |
| is alsmot impossible to redefine assert.                           |
|                                                                    |
| Indeed, most implementations do not guard <assert.h> so that we    |
| can include it with NDEBUG defined and/or undefined in the same    |
| compilation unit.  And many of the components we use (e.g.,        |
| Boost), include <cassert>, which undefines our assert and restores |
| the standard one.                                                  |
`-------------------------------------------------------------------*/

/// \def aver(Assertion, Message...)
/// Same as enforce, but can be disabled by NDEBUG.
# if defined NDEBUG
#  define aver(Exp, ...)  ((void) likely(Exp))
# else
#  define aver  enforce
# endif


/*---------------------------------------------------------.
| assert -- Same as "std::assert", but with our features.  |
`---------------------------------------------------------*/

/// \def assert(Assertion)
/// Same as assert, but on failure, dump \a Message on std::cerr.
# undef assert
# define assert aver


/*---------------------------.
| passert -- Pretty assert.  |
`---------------------------*/

/// \def passert(Subject, Assertion)
/// Same as assert, but on failure, dump \a Subject of std::cerr.
#  define passert(Subject, Assertion)                           \
  aver(Assertion,                                               \
       "failed assertion: %s\n\twith %s = %s",                  \
       #Assertion, #Subject, Subject)


/*--------------------------------------------------------.
| assert_exp -- Require a non-null value, and return it.  |
`--------------------------------------------------------*/

# if LIBPORT_ASSERT_VERBOSE
// Basically, an assert that can be used in an expression.  I meant to
// use "nonnull", but this name is unused by libstdc++, so the #define
// breaks everything.
namespace libport
{
  template <typename T>
  inline
  T
  assert_exp_(T t, const char* file, int line, const char* msg)
  {
    if (!t)
      fabort("%s:%s: failed assertion: %s", file, line, msg);
    return t;
  }
}

#  define assert_exp(Obj)		\
  libport::assert_exp_(Obj, __FILE__, __LINE__ , #Obj)
# else // !LIBPORT_ASSERT_VERBOSE
#  define assert_exp(Obj)		(Obj)
# endif // !LIBPORT_ASSERT_VERBOSE


/*---------------------------------------------------------------.
| assert_<op> -- compare two values, show both of them if fail.  |
`---------------------------------------------------------------*/

#  define DEFINE_ENFORCE_OP(OpName, Op)                                 \
namespace libport                                                       \
{                                                                       \
  template <typename T, typename U>                                     \
  inline                                                                \
  void                                                                  \
  enforce_ ## OpName(const T& lhs, const U& rhs,                        \
                     const char* lstr, const char* rstr,                \
                     const char* file, int line)                        \
  {                                                                     \
    if (!(lhs Op rhs))                                                  \
    {                                                                   \
      ASSERT_ECHO(file, line,                                           \
                  "failed assertion: " << lstr << " " #Op " " << rstr); \
      ASSERT_ECHO(file, line, "  with " << lstr << " = " << lhs);       \
      ASSERT_ECHO(file, line, "  with " << rstr << " = " << rhs);       \
      libport::abort();                                                 \
    }                                                                   \
  }                                                                     \
}

  DEFINE_ENFORCE_OP(eq, ==)
  DEFINE_ENFORCE_OP(ge, >=)
  DEFINE_ENFORCE_OP(gt, > )
  DEFINE_ENFORCE_OP(le, <=)
  DEFINE_ENFORCE_OP(lt, < )
  DEFINE_ENFORCE_OP(ne, !=)

#  define enforce_eq(A, B) ::libport::enforce_eq(A, B, #A, #B, __FILE__, __LINE__)
#  define enforce_ge(A, B) ::libport::enforce_ge(A, B, #A, #B, __FILE__, __LINE__)
#  define enforce_gt(A, B) ::libport::enforce_gt(A, B, #A, #B, __FILE__, __LINE__)
#  define enforce_le(A, B) ::libport::enforce_le(A, B, #A, #B, __FILE__, __LINE__)
#  define enforce_lt(A, B) ::libport::enforce_lt(A, B, #A, #B, __FILE__, __LINE__)
#  define enforce_ne(A, B) ::libport::enforce_ne(A, B, #A, #B, __FILE__, __LINE__)

  // X <= Y && Y <= Z
# define enforce_le_le(X, Y, Z)                 \
  do {                                          \
    enforce_le(X, Y);                           \
    enforce_le(Y, Z);                           \
  } while (false);

  // X <= Y && Y < Z
# define enforce_le_lt(X, Y, Z)                 \
  do {                                          \
    enforce_le(X, Y);                           \
    enforce_lt(Y, Z);                           \
  } while (false);


# if defined NDEBUG

#  define aver_eq  LIBPORT_NOP
#  define aver_ge  LIBPORT_NOP
#  define aver_gt  LIBPORT_NOP
#  define aver_le  LIBPORT_NOP
#  define aver_lt  LIBPORT_NOP
#  define aver_ne  LIBPORT_NOP

# elif LIBPORT_ASSERT_VERBOSE

#  define aver_eq  enforce_eq
#  define aver_ge  enforce_ge
#  define aver_gt  enforce_gt
#  define aver_le  enforce_le
#  define aver_lt  enforce_lt
#  define aver_ne  enforce_ne

# else // !defined NDEBUG && !LIBPORT_ASSERT_VERBOSE

#  define aver_eq(A, B) enforce(A == B)
#  define aver_ge(A, B) enforce(A >= B)
#  define aver_gt(A, B) enforce(A >  B)
#  define aver_le(A, B) enforce(A <= B)
#  define aver_lt(A, B) enforce(A <  B)
#  define aver_ne(A, B) enforce(A != B)

# endif

  // X <= Y && Y <= Z
# define aver_le_le(X, Y, Z)                    \
  do {                                          \
    aver_le(X, Y);                              \
    aver_le(Y, Z);                              \
  } while (false);

  // X <= Y && Y < Z
# define aver_le_lt(X, Y, Z)                    \
  do {                                          \
    aver_le(X, Y);                              \
    aver_lt(Y, Z);                              \
  } while (false);


  // Backward compatibility.
# define assert_eq  aver_eq
# define assert_ge  aver_ge
# define assert_gt  aver_gt
# define assert_le  aver_le
# define assert_lt  aver_lt
# define assert_ne  aver_ne

#endif // !LIBPORT_CASSERT

// Local Variables:
// mode: C++
// End:
