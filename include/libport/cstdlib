/*
 * Copyright (C) 2008-2011, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

#ifndef LIBPORT_CSTDLIB
# define LIBPORT_CSTDLIB

# include <cstdlib>
# include <string>
# include <map>
# include <libport/sstream>

# include <libport/compiler.hh>
# include <libport/detect-win32.h>
# include <libport/export.hh>
# include <libport/format.hh>


/*-----------------.
| libport::abort.  |
`-----------------*/

namespace libport
{
  /// A wrapper to std::abort to ensure that it is declared as
  /// noreturn (which is not the case of std::abort with MSVC).
  /// Also dumps the stack trace.
  ///
  /// Report \a msg before dying.
  LIBPORT_API
  ATTRIBUTE_COLD
  ATTRIBUTE_NORETURN
  void abort(const std::string& msg = "abort");

  /// A wrapper to std::abort to ensure that it is declared as
  /// noreturn (which is not the case of std::abort with MSVC).
  /// Also dumps the stack trace.
  LIBPORT_API
  ATTRIBUTE_COLD
  ATTRIBUTE_NORETURN
  void abort(const char* file, int line, const std::string& msg = "");

  /// If set, abort() throws instead of aborting. Useful for tests.
  LIBPORT_API
  ATTRIBUTE_COLD
  void abort_throw(bool v = true);

}


/*-------------------------.
| LIBPORT_ABORT(Message).  |
`-------------------------*/

/// \def LIBPORT_ABORT(MESSAGE).
///
/// Same as libport::abort, but evaluates to 0, so that it can be used
/// in expressions.

// Unfortunately, some old compilers (namely gcc 3) complain when the
// last operand of the comma operator has 'no effect' - which is
// otherwise perfectly legitimate. Work around them with this
// function.
//
// Other compilers, e.g., MSVC, dislike that a no-return function has
// a non-void return type, which makes plenty of sense.

# if defined _MSC_VER

# define LIBPORT_ABORT(Arg)                     \
  (::libport::abort(__FILE__, __LINE__, Arg), 0)

# else // ! _MSC_VER

ATTRIBUTE_COLD
ATTRIBUTE_NORETURN
static inline int
_libport_die_hard(const char* file, int line, const std::string& msg = "");

ATTRIBUTE_NORETURN
static inline int
_libport_die_hard(const char* file, int line, const std::string& msg)
{
  libport::abort(file, line, msg);
}

#  define LIBPORT_ABORT(Arg)                    \
  ::_libport_die_hard(__FILE__, __LINE__, Arg)
# endif

/*--------------------------.
| fabort(Message, Arg...).  |
|                           |
| pabort(Arg1 << Arg2...).  |
`--------------------------*/

#  define fabort(...)                           \
  LIBPORT_ABORT(libport::format(__VA_ARGS__))
// Backward.
# define pabort(Msg)                                            \
  LIBPORT_ABORT((libport::StreamWrapper() << Msg).str())



/*----------------------------------------------.
| errabort -- perror (well, strerror) + abort.  |
`----------------------------------------------*/

/// \def errabort(Err, Msg)
///
/// It is on purpose that Err is not evaluated when NDEBUG: Err could
/// be costly, or have side effects.  Rather, use ERRNO_RUN, or
/// PTHREAD_RUN and so forth.
# if defined _MSC_VER
// Contrary to what has been reported, ", ## __VA_ARGS" does not
// always remove the previous comma
// (http://msdn.microsoft.com/en-us/library/ms177415(v=vs.80).aspx).
// So for Visual, don't have a comma before __VA_ARGS__.  Yet it seems
// to work properly below for errnoabort...
#  define errabort(Err, ...)                                            \
  fabort("%s: %s", libport::strerror(Err), libport::format(__VA_ARGS__))
# else
#  define errabort(Err, Msg, ...)                               \
  fabort("%s: " Msg, libport::strerror(Err), ## __VA_ARGS__)
# endif

/// \def errnoabort(Msg, ...)
# define errnoabort(Msg, ...)                   \
   errabort(errno, Msg, ## __VA_ARGS__)

/// \def unreachable()
///
/// This call should never be reached, just abort.
# define unreachable()                          \
  LIBPORT_ABORT("unreachable code reached")

/// \def ERRNO_RUN(Function, ...)
/// Run Function(...) and use errnoabort on errors.
///
/// It is considered that there is an error when Function returns a
/// negative value.  Alternatively we could set errno to 0 before
/// calling the function, and checking it afterwards, but it's more
/// expensive.
# define ERRNO_RUN(Function, ...)               \
  do {                                          \
    if (Function (__VA_ARGS__) < 0)             \
      errnoabort(#Function);                    \
  } while (false)



/*---------.
| getenv.  |
`---------*/

namespace libport
{
  LIBPORT_API
  const char* getenv(const char* name);
}

/*-------------.
| getenviron.  |
`-------------*/

namespace libport
{
  typedef std::map<std::string, std::string> environ_type;

  LIBPORT_API
  // Return a map of environment variables.
  environ_type getenviron();
}

/*-------.
| rand.  |
`-------*/

namespace libport
{
  LIBPORT_API
  int rand();
}

/*---------.
| setenv.  |
`---------*/

# if defined _MSC_VER || defined __MINGW32__
extern "C"
{
  LIBPORT_API
  int setenv(const char* key, const char* value, int overwrite);
}
# endif

/*----------.
| strtoll.  |
`----------*/

# if defined _MSC_VER
extern "C"
{
  LIBPORT_API
  long long strtoll(const char* nptr, char** endptr, int base);
}
# endif // WIN32

/*-----------.
| unsetenv.  |
`-----------*/

# if defined _MSC_VER || defined __MINGW32__
extern "C"
{
  LIBPORT_API
  int unsetenv(const char* key);
}
# endif

/*----------.
| xgetenv.  |
`----------*/

extern "C"
{
  /// Return getenv(c) if defined, \a deflt otherwise.
  LIBPORT_API
  const char* xgetenv(const char* c, const char* deflt = "");
}

namespace libport
{
  /// Return getenv(c) if defined, \a deflt otherwise.
  LIBPORT_API
  std::string xgetenv(const char* c, const std::string& deflt = "");

  /// Return getenv(c) if defined, \a deflt otherwise.
  LIBPORT_API
  std::string xgetenv(const std::string& c, const std::string& deflt = "");
}

/*----------.
| xsystem.  |
`----------*/

namespace libport
{
  LIBPORT_API
  ATTRIBUTE_UNUSED_RESULT
  int  system(const std::string& cmd);
  LIBPORT_API
  void xsystem(const std::string& cmd);
}

# include <libport/cstdlib.hxx>

#endif // ! LIBPORT_CSTDLIB

// Local Variables:
// mode: C++
// End:
