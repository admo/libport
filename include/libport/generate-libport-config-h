#! /usr/bin/perl

sub rewrite($$)
{
  my ($input, $output) = @_;
  use IO::File;

  my $in = new IO::File($input) or die "cannot open $input";
  my $out = new IO::File(">$output") or die "cannot open $output for writing";

  print $out <<EOF;
/* $output.  Generated from $input by $0.  */

#ifndef LIBPORT_CONFIG_H
# define LIBPORT_CONFIG_H

EOF

  # Make some efforts on the regexp, so that we don't catch #define
  # in comments such as the one from AC_C_RESTRICT:
  #
  # /* Work around a bug in Sun C++: it does not support _Restrict or
  #    __restrict__, even though the corresponding Sun C compiler ends up with
  #    "#define restrict _Restrict" or "#define restrict __restrict__" in the
  #    previous line.  Perhaps some future version of Sun C++ will work with
  #    restrict; if so, hopefully it defines __RESTRICT like Sun C does.  */
  while ($_ = $in->getline())
  {
    s{^((?:/\*)?\s*#(?:define|undef))\s+([A-Z_])}{$1 LIBPORT_$2};
    s{^((?:/\*)?\s*#(?:define|undef))\s+([a-z])} {$1 libport_$2};
    print $out $_;
  }

  print $out <<EOF;

// Needed for std::min and std::max on Windows.
# ifndef NOMINMAX
#  define NOMINMAX
# endif

#endif // LIBPORT_CONFIG_H
EOF
}

rewrite ($ARGV[0], $ARGV[1]);


### Setup "GNU" style for perl-mode and cperl-mode.
## Local Variables:
## perl-indent-level: 2
## perl-continued-statement-offset: 2
## perl-continued-brace-offset: 0
## perl-brace-offset: 0
## perl-brace-imaginary-offset: 0
## perl-label-offset: -2
## cperl-indent-level: 2
## cperl-brace-offset: 0
## cperl-continued-brace-offset: 0
## cperl-label-offset: -2
## cperl-extra-newline-before-brace: t
## cperl-merge-trailing-else: nil
## cperl-continued-statement-offset: 2
## End:
