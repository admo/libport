#! /usr/bin/perl -w

# We need a fairly recent version of Perl to have powerful regexps.
use 5.10.0;

use strict;
use IO::File;
use File::Basename;

=head1 NAME

  libportify - sanitize sources/upgrade libport usage

=head1 SYNOPSIS

  libportify [OPTIONS...] DIR|FILE...

=head1 DESCRIPTION

Traverse all the DIR and FILE... and process them.

The steps are:

=over 4

=item spaces

Clean up trailing spaces.

=item relicense

Make the various license header standard, and update the copyright
years.

=item copyright

Update copyright years.  Works only on valid license notices.

=item headers

Fix headers (e.g., when libport provides replacement headers, use them
instead of system headers).

=item debug

Update C<GD_DEBUG> calls.

=item renamings

Fix names and bad spelling.

=back

=head1 OPTIONS

General options:

=over 4

=item B<-h>, B<--help>

Display this message and exit.

=item B<-f>, B<--foreign>

This package is foreign, run only the steps that make sense for
non-libport packages.

=item B<-s>, B<--step>=I<step>

Run the step C<step>.  Accumulates.  If B<-s> is not used at all, run
all the steps in the order the are presented in above.

=item B<-q>, B<--quiet>

Be less verbose.  Accumulates.

=item B<-v>, B<--verbose>

Be more verbose.  Accumulates.

=back

=cut

# The program to use to display diffs.
my $diff;

# Whether a foreign package.
my $foreign = 0;

# The prefix for the log messages.
my $me = basename($0);

# Steps to run, in order.
my @step;

# Verbosity level.
my $verbose = 1;

# A regexp that matches 0 or more repetitions of either a
# non-backtracking word with no parens/braces, or a braced group, or a
# parenthezied group.
#
# Note that since it is greedy and non-backtracking, it might eat too
# much.  Use $braced instead.
my $balanced;
$balanced =
  qr{
       (?:
          (?> [^(){}\[\]]+ )         # Non-parens/braces without backtracking
        |
          \( (??{ $balanced }) \)     # Group with matching parens
        |
          \{ (??{ $balanced }) \}     # Group with matching braces
        |
          \[ (??{ $balanced }) \]     # Group with matching brackets
       )*
    }x;

# Same as above, but allow backtracking on non-braced parts, so that
# we don't eat places where we want to catch operators.
my $braced =
  qr{
      (?:
          \{ $balanced \}
        | \( $balanced \)
        | \[ $balanced \]
        | [^(){}\[\]]+        # Non-parens/braces with backtracking
      )*
    }x;


# contents ($FILE_NAME)
# ---------------------
sub contents ($)
{
  my ($file) = @_;
  local $/;                     # Turn on slurp-mode.
  use IO::File;
  my $f = new IO::File "< $file" or die "cannot open $file: $!";
  my $contents = $f->getline or die "cannot read $file: $!";
  $f->close;
  $contents;
}


=head1 FUNCTIONS

=over 4

=item C<verbose($level, @message)>

Report the C<@message> is C<$level> E<lt>= C<$verbose>.

=cut

sub verbose($@)
{
  my ($level, @message) = @_;
  map { print STDERR "$me: " . "  " x $level . "$_\n" } @message
    if $level <= $verbose;
}

## ------------- ##
## fix headers.  ##
## ------------- ##

# fix_headers ($FILE, \$CONTENTS)
# ------------------------------
# Normalize the use of libport and system headers.
sub fix_headers ($\$)
{
  my ($file, $contents_ref) = @_;
  local $_ = $$contents_ref;

  # C-system headers.
  s{include\s*<
    (assert
    |ctype
    |errno
    |limits
    |locale
    |math
    |setjmp
    |signal
    |stdarg
    |stddef
    |stdio
    |stdint
    |stdlib
    |string
    |time
    ).h>}
   {include <c$1>}gx;

  # Libport headers.
  # FIXME: Compute this list.
  s{<(cassert
     |cerrno
     |cmath
     |csignal
     |cstdio
     |cstdlib
     |cstring
     |ctime
     |fcntl.h
     |pthread.h
     |semaphore.h
     |unistd.h
     |sys/param.h
     |sys/prctl.h
     |sys/select.h
     |sys/socket.h
     |sys/stat.h
     |sys/time.h
     |sys/wait.h
     |sys/types.h)>}
  {
    my $header = $1;
    # System header wrappers must include system headers, they must not
    # be converted to including themselves.
    $file =~ $header ? "<$header>" : "<libport/$header>"
  }gxe;

  # Some Boost headers have a version in Libport that avoids warnings.
  s{<boost/(bind|lexical_cast|format).hpp>}
   {
     my $header = $1;
     # We use -, they use _.
     (my $dash_header = $header) =~ tr/_/-/;
     $file =~ $dash_header ? "<boost/$header.hpp>" : "<libport/$dash_header.hh>";
   }gxe;

  $$contents_ref = $_;
}

## --------------- ##
## libport.debug.  ##
## --------------- ##

# to_format $STREAM
# -----------------
# Take a C++ stream content sequence without the stream itself
# and return a format string and arguments.
#
# For instance
#
#    "this is a message"
#    => ("this is a message", "")
#    "this is a message " << foo << ": " << bar
#    => ("this is a message %s: %s", "(foo)(bar)")
sub to_format ($)
{
  my ($stream) = @_;
  my $res = "";
  my @arg;
  for my $c (split(/\s*<<\s*/, $stream))
  {
      $c =~ s/^\s+//;
      $c =~ s/\s+$//;
      if ($c =~ /^"(.*)"$/ || $c =~ /^'(.*)'$/)
      {
          $res .= $1;
      }
      else
      {
          $res .= "%s";
          push @arg, $c
      }
  }
  my $args = join ', ', @arg;
  return ("\"$res\"", $args);
}

# gdebug($CATEGORY, [$FORMAT, $ARGS])
# -----------------------------------
sub gdebug($@)
{
  my ($category, ($format, $args)) = @_;
  if ($args)
  {
    return "GD_F$category($format, $args)";
  }
  else
  {
    return "GD_$category($format)";
  }
}

# trace_num_to_category($NUM)
# ---------------------------
# TRACE is used for informative messages.  Bounce to INFO.
sub trace_num_to_category ($)
{
  my ($num) = @_;
  my @cat = ("log", "trace", "debug", "dump");
  my $res = $cat[$num] || "dump";
  return "INFO_" . uc $res;
}

# libport_debug ($FILE, \$CONTENTS)
# --------------------------------
# Convert from gdebug.hh to Libport.Debug.
sub libport_debug ($\$)
{
  my ($file, $contents_ref) = @_;
  local $_ = $$contents_ref;

  # TRACE(0, "foo: " << foo);
  s{TRACE\s*\((\d),\s*(.*?)\)}
   {gdebug(trace_num_to_category($1), to_format($2))}ges;

  # DEBUG_LOG("-> Remote") << "askForStreamDestruction (" << cnx_id << ")" << std::endl;
  # DEBUG_LOG(session_id)  << std::endl;
  # DEBUG_LOG(session_id) << "parseRTSPUrl: "<< e.what ();
  s{DEBUG_LOG\s*\((.*?)\)(.*?)(?:\s*<<\s*std::endl)?\s*;}
   {gdebug("INFO_LOG", to_format("'[' << $1 << \"] \" $2")) . ";";}ges;

  # Move from "Format, (Arg1)(Arg2)" to "Format, Arg1, Arg2"...
  s{
    ([ \t]*)
    (GD_F(?:INFO(?:_LOG|_TRACE|_DEBUG|_DUMP)?|WARN|ERROR|PUSH|ABORT))
    \(
      (".*?"),\s*
      ((?:\($balanced+\)\s*)+)
    \)
   }
   {
     my $spaces = $1;
     my $channel = $2;
     my $format = $3;
     my $args = $4;
     my @arg = ($format);
     $args =~ s/\(($balanced+)\)\s*/push @arg, $1/ges;

     # Chose the separator: if fits on a single line, simply ','.
     # Otherwise, indeed each argument on its line.
     my $tab = $spaces . " " x length("$channel(");
     my $res = $spaces . "$channel(" . (join ", ", @arg) . ")";
     $res = $spaces . "$channel(" . (join ",\n$tab", @arg) . ")"
       if 76 < length $res;
     $res;
   }xges;


  $$contents_ref = $_;
}

# libport_renamings ($FILE, \$CONTENTS)
# -------------------------------------
# Convert old symbol names to new names.
sub libport_renamings ($\$)
{
  my ($file, $contents_ref) = @_;
  local $_ = $$contents_ref;

  # We are now simply using Boost.Unordered.
  s/libport::hash_map/boost::unordered_map/g;

  # Denottalify.
  s/allready/already/g;

  $$contents_ref = $_;
}


# libport_spaces ($FILE, \$CONTENTS)
# ---------------------------------
# Nuke trailing white spaces.  Convert from DOS to Unix if needed.
sub libport_spaces ($\$)
{
  my ($file, $contents_ref) = @_;

  $$contents_ref =~ s/[ \t\r]+$//gm;
}


## ---------- ##
## Licenses.  ##
## ---------- ##

my @license_re =
(

q{<file>: This file is part of UrbiStudio.
<copyright> <holder>, <year>.

This software is provided "as is" without warranty of any kind,
either expressed or implied, including but not limited to the
implied warranties of fitness for a particular purpose.

See the LICENSE file for more information.
For comments, bug reports and feedback: http://www.urbiforge.com},


q{(?:\\\\file <file>)?
This file is part of <project>
<copyright> <years> <holder>

Permission to use, copy, modify, and redistribute this software for
non-commercial use is hereby granted.

This software is provided "as is" without warranty of any kind,
either expressed or implied, including but not limited to the
implied warranties of fitness for a particular purpose.

For more information, comments, bug reports: http://www.urbiforge.com},

q{<copyright> (?:<years>, <holder>|<holder>, <years>.)

This software is provided "as is" without warranty of any kind,
either expressed or implied, including but not limited to the
implied warranties of fitness for a particular purpose.

See the LICENSE file for more information.
For comments, bug reports and feedback: http://www.urbiforge.com},

q{\\\\file <file>

 File: .*
 (?<brief>Implementation.*)

 This file is part of
 <project>
 <copyright> <years>.*

 Permission to use, copy, modify, and redistribute this software for
 non-commercial use is hereby granted.

 This software is provided "as is" without warranty of any kind,
 either expressed or implied, including but not limited to the
 implied warranties of fitness for a particular purpose.

 For more information, comments, bug reports: http://www.urbiforge.net},

q{(?:\\\\file <file>)?

(?<brief>.*\.)?

<copyright> <years> <holder>.  All rights reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or \(at your option\) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.}
);

# The "syntax" of some interesting fields.
my %license_field =
(
  'copyright' => q{Copyright \([cC]\)},
  'file'      => q{[\\-\\w\\./]+},
  'holder'    => q{(?:Gostai (?:SAS|S.A.S.?)?|Jean-Christophe Baillie)},
  'project'   => q{[^\\n]*},
  'years'     => q{[\\d\\-]+(?:, [\\d\\-]+)*},
);

# Make the regexps more flexible.
for my $re (@license_re)
{
  for my $field (keys %license_field)
    {
      $re =~ s{<$field>}{(?<$field>$license_field{$field})}g;
    }
  # Accept arbitrary comment closing.
  verbose 1, $re;
  $re .= ' (?:[\*\\s]*\*/\s)?';
  $re =~ s{^\s*}{^[\\s/*!]*}gm;
  $re =~ s/\s+/\\s+/gm;
  $re .= '\s*';
  verbose 1, $re;
}

=item C<libport_license(%group)>

The proper license notice based on the C<%group>.

=cut

sub libport_license (%)
{
  my (%group) = @_;
  for my $key (sort keys %group)
    {
      print "$key => {{$group{$key}}}\n";
    }

  my $res;
  $res .= <<EOF;
/*
 * Copyright (C) $group{years}, Gostai S.A.S.
 *
 * This software is provided \"as is\" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

EOF

  $res .= "/// \\file $group{file}\n"
    if defined $group{file};

  $res .= "/// \\brief $group{brief}\n"
    if defined $group{brief};

  $res;
}


=item C<libport_relicense($file, \$contents)>

Update the license notice.

=cut

sub libport_relicense ($\$)
{
  my ($file, $contents_ref) = @_;

  for my $re (@license_re)
    {
      verbose 2, $$contents_ref;
      $$contents_ref =~ s{$re}{libport_license(%+)}smeg;
    }
}



=item C<libport_copyright($file, \$contents)>

Update the copyright years.

=cut

sub libport_copyright ($\$)
{
  my ($file, $contents_ref) = @_;
  local $_ = $$contents_ref;

  s{
      (Copyright\s\(C\)\s
      # A series of four-digit dates.  Possibly intervals.
      \d{4}(?:-\d{4})?(?:,\s\d{4}(?:-\d{4})?)*)
      # Don't change Copyright lines that are not about Gostai.
      (?=,\ Gostai)
   }
   {
     my $orig = $1;
     $orig . ($orig =~ /2010$/ ? "" : ", 2010")
   }gex;

  $$contents_ref = $_;
}


## ----------- ##
## transform.  ##
## ----------- ##


# libportify ($FILE, $CONTENTS)
# -----------------------------
sub libportify ($$)
{
  my ($file, $contents) = @_;
  my %step =
    (
     spaces    => \&libport_spaces,
     headers   => \&fix_headers,
     debug     => \&libport_debug,
     renamings => \&libport_renamings,
     relicense => \&libport_relicense,
     copyright => \&libport_copyright,
    );

  for my $step (@step)
  {
    die "$me: invalid step: $step\n"
      unless exists $step{$step};
    verbose 3, "Step: $step", split("\n", $contents);
    $step{$step}->($file, \$contents);
  }

#   libport_spaces    $file, $contents;
#   fix_headers       $file, $contents;
#   libport_debug     $file, $contents;
#   libport_renamings $file, $contents;
#   # First normalize the license, then update the year.
#   libport_relicense $file, $contents;
#   libport_copyright $file, $contents;
  $contents;
}

# transform_file (&TRANSFORM, $FILE)
# ----------------------------------
sub transform_file (\&$)
{
  my ($transform_ref, $file) = @_;

  # When using globbing, we sometimes find directories.
  if (! -f $file)
  {
    warn "ignoring non file: $file";
    return;
  }

  # When using globbing, we sometimes find directories.
  if ($file =~ /\.bak$/)
  {
    warn "ignoring backup file: $file";
    return;
  }

  my $contents = contents ($file);
  my $updated = $transform_ref->($file, $contents);
  if ($contents ne $updated)
    {
      my $mode = (stat($file))[2] & 0777;
      my $bak = "$file.bak";
      rename ($file, $bak)
        or die "$0: cannot rename $file as $bak: $!\n";
      my $out = new IO::File(">$file") or die;
      print $out $updated;
      $out->close;
      chmod ($mode, $file)
        or die "$me: cannot chmod $file: $!\n";
      system("$diff -u $bak $file");
    }
  else
    {
      warn "no changes: $file\n";
    }
}


# transform_things (&TRANSFORM, @THING)
# ------------------------------------
# Work on file-system entities.
sub transform_things (\&@);
sub transform_things (\&@)
{
  my ($transform_ref, @thing) = @_;

  for my $thing (@thing)
    {
      if (
          -f $thing
          # We libportify source files.  They have an extension,
          # except cstdio and so forth...
          && basename($thing) =~ m{ (?:\.(?:cc|hh|h|hxx)$)
                                  | (?:^c\w+$)}x
          # but then configure matches that regexp.
          && basename($thing) !~ m{configure}x
        )
        {
          transform_file &$transform_ref, $thing;
        }
      elsif (-d $thing
             && $thing !~ m{(?:libltdl
                              |libcoroutine
                              |\.git
                              |\.dsym
                              |bison
                              |_build
                              |jpeg)$}x)
        {
          opendir (my $dir, $thing) ||
            die "cannot opendir $thing: $!";
          my @e = map { "$thing/$_" } grep { !/^\.\.?$/ } readdir($dir);
          transform_things (&$transform_ref, @e);
          closedir $dir;
        }
      else
        {
          warn (-e $thing
                ? "skipping $thing\n"
                : "ignoring $thing: does not exist\n");
        }
    }
}

=item C<help>

Generate the B<--help> message.  Generates the full man page when
C<$verbose>.

=cut

sub help ($)
{
  my ($verbose) = @_;
  use Pod::Usage;
  # See <URL:http://perldoc.perl.org/pod2man.html#NOTES>.
  pod2usage( { -message => "Relocate shlib deps when possible, check remaing deps",
               -exitval => 0,
               -verbose => $verbose,
               -output  => \*STDOUT });
}

=item C<getopt>

Process the command line options.

=cut

sub getopt ()
{
  use Getopt::Long;
  my %option = (
    "f|foreign"     => \$foreign,
    "h|help"        => sub { help ($verbose) },
    "s|step=s"      => \@step,
    "q|quiet"       => sub { --$verbose },
    "v|verbose"     => sub { ++$verbose },
    );
  Getopt::Long::Configure ("bundling", "pass_through");
  GetOptions (%option)
    or exit 1;

  @step =
    $foreign
    ? qw(spaces relicense copyright)
    : qw(spaces relicense copyright headers debug renamings)
    unless @step;
  verbose 2, "Steps: @step";
}


## ------ ##
## main.  ##
## ------ ##

getopt;
$diff = (`colordiff --version 2>/dev/null` ne ''
         ? 'colordiff'
         : 'diff');
transform_things &libportify, @ARGV;


### Setup "GNU" style for perl-mode and cperl-mode.
## Local Variables:
## perl-indent-level: 2
## perl-continued-statement-offset: 2
## perl-continued-brace-offset: 0
## perl-brace-offset: 0
## perl-brace-imaginary-offset: 0
## perl-label-offset: -2
## cperl-indent-level: 2
## cperl-brace-offset: 0
## cperl-continued-brace-offset: 0
## cperl-label-offset: -2
## cperl-extra-newline-before-brace: t
## cperl-merge-trailing-else: nil
## cperl-continued-statement-offset: 2
## End:
