#! /bin/sh
##
## bison++.in: This file is part of build-aux.
## Copyright (C) Gostai S.A.S., 2006-2008.
##
## This software is provided "as is" without warranty of any kind,
## either expressed or implied, including but not limited to the
## implied warranties of fitness for a particular purpose.
##
## See the LICENSE file for more information.
## For comments, bug reports and feedback: http://www.urbiforge.com
##


# Exit status.
status=0

# Any tool failure is a failure of the script.
set -e

: ${BISON=@BISON@}

# bison++ INPUT OUTPUT OPTIONS
# ----------------------------

me=$(basename $0)
move_if_change='@abs_srcdir@/move-if-change'

input=$1
input_base=$(basename "$input")
shift
output=$1
output_base=$(basename "$output")
output_base_noext=$(echo "$output_base" | sed -e 's/\.[^.]*//')
output_dir=$(dirname "$output")
shift

options="$@"
if $BISON --xml --version >/dev/null 2>&1; then
  options="$options --xml"
fi


# Alexandre Duret-Lutz also notes that in VPATH-builds $(srcdir) can
# be an absolute path depending on how ./configure is called ...
# In that case

#   bison $(srcdir)/parsetiger.yy [...]

# will hard code the path in the maintainer's tree.  Hence, do not use
# paths with Bison, chdir there.

# A tmp dir.
tmp=$output_base_noext.dir
rm -rf $tmp
mkdir $tmp

# Compile in this dir.
# Don't use `ln -s' as its semantics of paths sucks.
cp $input $tmp
cd $tmp
set +e
$BISON $options $input_base -o $output_base
status=$?
set -e


# fix_bison_output FILE
# ---------------------
# Fixes in place.
fix_bison_output ()
{
  # Fix doxygen tags.
  perl -pi -e "s|\Q\\file $base\E\b|\\\\file parse/$base|g;" "$1"

  # Bison should really offer a means to include headers in
  # position.hh.
  perl -pi \
       -e 'print("# include \"libport/symbol.hh\"\n") if /namespace yy/'\
       "$1"
}

# Go back to where we were and use relative paths instead of using
# absolute file names.  The messages look nicer.
cd ..
for file in $tmp/*
do
  base=$(basename $file)
  base_noext=$(echo "$base" | sed -e 's/\.[^.]*//')
  # The name under which $file is to be installed.
  out=$output_dir/$base
  case $status:$base in
    *:$input_base)
	# Leave it here.
	;;

    # Success or not, install it.
    *:*.xml)
	# Computing the HTML is slow.  Do it when the XML changed.
	fix_bison_output "$file"
	if ! test -r "$out" \
	    || ! cmp -s "$file" "$out" \
	    || test ! -f "$output_dir/$base_noext.html"; then
	  xml2html="xsltproc $($BISON --print-datadir)/xslt/xml2xhtml.xsl"
	  if ! $xml2html "$file" >$tmp/$base_noext.html; then
	    echo >&2 "$0: cannot convert XML report to HTML"
	    rm $tmp/base_noext.html
	  fi
	  $move_if_change "$tmp/$base_noext.html" \
			  "$output_dir/$base_noext.html"
	fi
	$move_if_change "$file" "$out"
	;;

    0:*.hh)
	fix_bison_output "$file"
	# To save cycles, if the file differs only on sync lines,
	# update it (to be right), but keep the original timestamps.
	if test -r "$out" &&
	   diff -I '^#line' -I '/\* Line .* of .*  \*/' -q "$file" "$out"; then
	    touch -r "$out" "$file"
	    cp "$out" "$out.bak"
	    echo >&2 "$0: kept the stamps of $file"
	fi
	$move_if_change "$file" "$out"
	;;

    *:*.output)
	$move_if_change "$file" "$out"
	;;

    0:*)
	fix_bison_output "$file"
	$move_if_change "$file" "$out"
	;;
  esac
done

# Get rid of the tmp dir.
rm -rf $tmp
exit $status
