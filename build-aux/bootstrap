#! /bin/sh

##
## bootstrap: This file is part of build-aux.
## Copyright (C) Gostai S.A.S., 2006-2008.
##
## This software is provided "as is" without warranty of any kind,
## either expressed or implied, including but not limited to the
## implied warranties of fitness for a particular purpose.
##
## See the LICENSE file for more information.
## For comments, bug reports and feedback: http://www.urbiforge.com
##

usage ()
{
  cat <<EOF
Usage: $0 [OPTIONS]

Bootstrap the GNU Build system using autoreconf.

This file and git-my-update use a common file, \`.externals', to
describe what's to be done.  Its syntax is dummy and made to be
easily sed-parsable.  It supports the following directives (which
must be in column 0, anything else is silently ignored):

external: [DIR-NAME ->] REPO-NAME
  Install REPO-NAME as submodule, and update it when needed.
  E.g. \`external: libport'.
       \`external: tests -> urbivalid'.

link: FROM -> TO
  Install a symlink named FROM that points to TO.
  E.g. \`link include/libport -> libport/include/libport'.

subpackage: DIR-NAME
  Declare a subpackage (i.e., AC_CONFIG_SUBDIRS) that needs to be
  bootstrapped too.
  E.g., \`subpackage: lock-system'.

Options:
  -h, --help          display this message and exit
  -n, --dry-run       do nothing
      --no-recursive  do not bootstrap subpackages
EOF
}

stderr ()
{
  local i
  local me=$(basename "$0")
  for i
  do
    echo >&2 "$me: $i"
  done
}

run ()
{
  stderr "running: $*"
  if $run; then
    "$@"
  fi
}

# Return the set of attributes corresponding to TAG in .externals.
attributes ()
{
  if test -f .externals; then
    perl -ne "s/^$1:\\s*// && print" .externals
  fi
}

set -e

recurse=true
run=true

for arg
do
  case $arg in
    -n|--dry-run) run=false;;
    -h|--help) usage;;
    --no-recursive)  recurse=false;;
    *) stderr "invalid argument: $arg"
       exit 64;;
  esac
done

# If there are symlinks to install, do it here.
attributes link |
while read link
do
  # "from -> to" in the sense of symlinks: ./$from points to ./$to.
  from=$(echo "$link" | perl -pe 's/\s*->.*$//')
  to=$(echo "$link"   | perl -pe 's/^.*->\s*//')

  if ! test -e $from; then
    stderr "Installing $from -> $to"
    mkdir -p $(dirname "$from")
    morf=$(dirname $(echo "$from" | sed 's,[^\\/]*,..,g'))
    run ln -sf $morf/$to $from ||
    run ln $to $from ||
    run cp -pr $to $from
  fi
done

if test -f bootstrap.cfg; then
  source bootstrap.cfg
fi

for i in $keep
do
  run cp $i $i.bak
done

# On some environments (Darwin Ports), libtoolize is glibtoolize.
# I suppose their autoreconf is adjusted accordingly, but I use
# my custom Autoconf...
for lt in "$LIBTOOLIZE" libtoolize glibtoolize
do
  if ($lt --version) >/dev/null 2>&1; then
    export LIBTOOLIZE="$lt"
    break
  fi
done

if $recurse; then
  # Recursive bootstrapping.
  for i in $(attributes "subpackage")
  do
    (
      # The format for this message is not free: taken from Emacs, itself
      # using GNU Make's format.
      stderr "Entering directory \`$i'";
      cd $i
      ./bootstrap
      stderr "Leaving directory \`$i'";
    )
  done
fi

run autoreconf --no-recursive --force --verbose --install

for i in $keep
do
  run mv $i.bak $i
done

# If the pseudo-standard name "_build" is used, then how about trying
# to continue the re-build?
if test -f _build/config.status; then
  run cd _build
  run ./config.status --recheck
  run ./config.status
  run make
fi

# Local Variables:
# mode: shell-script
# End:
