
		      # ====================== #
		      # cmake tools repository #
		      # ====================== #

* Introduction

This file describe how to use cmake to compile a project and the
organization of this directory. For further information about how to
write new modules for cmake see the README file in the modules directory.

* How to install cmake

You can either download a binary package or a source package from:

    http://www.cmake.org/HTML/Download.html

For the source package, follow the instruction in Readme.txt

* How to customize compilation flags

You can customize compilation flags either using the command line
arguments or tweaking the option using the GUI (cmake-gui). Note, that
at any time if you want to restart from the scratch you have to remove
the CMakeCache.txt file in your build directory.

** Source/Binary directory

The binary directory is the current path from where you start cmake. The source
directory is the first argument. Typically:

  $ mkdir _build
  $ cd _build
  $ cmake ..

** Generator

On Unix the best generator (and default one) is 'Unix Makefiles'. Use
-G to specify it. See cmake -h for the list of available generators.

Once cmake as finished run 'make' and 'make install'.

** Specify non standard library path

On Unix the most common way is to use CMAKE_PREFIX_PATH as it behaves more or
less like configure --with-PACKAGE. Add this option to cmake:

  -DCMAKE_PREFIX_PATH="prefix/to/lib1;prefix/to/lib2;prefix/to/lib3"

** Install prefix

The install prefix (equivalent to configure --prefix) is set using:

  -DCMAKE_INSTALL_PREFIX="path/where/to/install/urbiLive"

** Verbose mode

The verbose mode helps debugging your CMakeLists.txt files since cmake print
the whole command line it generates to build each target. Pass this option:

  -DCMAKE_VERBOSE_MAKEFILE=ON

** Extra CXX flags

Extra CXX flags are specified this way:

  -DCMAKE_CXX_FLAGS="-W -Wall -ggdb3 -fno-inline"

*** CXX flags and cl.exe (Visual C++ compiler)

Add to CMAKE_CXX_FLAGS:

  "/W4"     - Set warning level to 4 (default is 3)
  "/wd4127" - Disable warning 4127
  "/wd4512" - Disable warning 4512

And cl will issue all warnings enabled by default on other platforms
while still skipping many that would be raised in dependencies (e.g. Qt).

** Build type

You can choose your build type, debug or release, this way:

  -DCMAKE_BUILD_TYPE=Debug

** Options

Option to tweak the build of a given project are set using the
-DMYOPT=VAL arguments. Example

  -DENABLE_LOCKSYSTEM=OFF

* Platform/compiler specific setup

On some platform additionnal setup are required in order to call cmake in a
proper environment.

** cygwin/cl

In order to compile using Visual Studio compiler (cl.exe) from the cygwin
environment you have to make sure:

1) You use the following patch version of cygwin make:

http://www.cmake.org/files/cygwin/make.exe

2) Make sure you have the following environment variable set at the time you
call cmake or make:

export INCLUDE="C:\vcxx8\VC\PlatformSDK\INCLUDE;C:\vcxx8\VC\INCLUDE;"

export LIB="C:\vcxx8\VC\PlatformSDK\LIB;C:\vcxx8\VC\LIB;"

export LIBPATH="C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727;"

export PATH=/cygdrive/c/vcxx8/Common7/IDE:/cygdrive/c/vcxx8/VC/BIN:/cygdrive/c/vcxx8/Common7/Tools:/cygdrive/c/WINDOWS/Microsoft.NET/Framework/v2.0.50727:/cygdrive/c/vcxx8/VC/VCPackages:${PATH}

NOTE: vcxx8 is the installation directory of Visual Studio 2005.

3) You use the 'Unix Makefile Generator':

i.e: -G 'Unix Makefiles'

4) You have CC and CXX set properly when you call cmake:

export CC=cl
export CXX=cl

5) There is no conflicting /usr/bin/link.exe

6) You give windows style path to cmake. You are encourage to use cygpath to
   make the conversion.

7) You use the windows version of cmake.

Here the conf.sh file, I use for urbiLab:

myhome=$(cygpath -w "$HOME/despres")
liburbi=$(cygpath -w "$myhome/install/sdk-remote-1.5")
qt=$(cygpath -w "/cygdrive/c/Qt/4.4.1-com")
qt_ext=$(cygpath -w "$myhome/install/qt-ext/cygwin-cl")
prefix=$(cygpath -w "$myhome/install/urbi-lab/cygwin-cl")
include_path=$(cygpath -w "$liburbi/include;$qt_ext/include")
library_path=$(cygpath -w "$liburbi/lib;$qt_ext/lib")
program_path=$(cygpath -w "$qt/bin")
cmake="$HOME/share/cmake-2.6.1/win32_x86/bin/cmake.exe"
export CC=cl
export CXX=cl
"$cmake" .. \
    -G 'Unix Makefiles' \
    -DBUILDFARM=ON \
    -DCMAKE_VERBOSE_MAKEFILE=ON \
    -DCMAKE_INSTALL_PREFIX="$prefix" \
    -DCMAKE_INCLUDE_PATH="$include_path" \
    -DCMAKE_LIBRARY_PATH="$library_path" \
    -DCMAKE_PROGRAM_PATH="$program_path" \
    -DCMAKE_PREFIX_PATH="$qt_ext" \
    -DBUILD_TYPE=Relase \
    -DENABLE_LOCKSYSTEM=OFF \
    "$@"


NOTE: This setup has been tested with:
 - Visual Studio 2005 Express Editon
 - Microsoft .NET Framework 2.0 Service Pack 1

** cygwin/mingw

In order to compile using MinGW C/C++ compiler from the Cygwin
environment you have to make sure:

1) You use the following patch version of cygwin make:

http://www.cmake.org/files/cygwin/make.exe

2) Make sure you have the following environment variable set at the time you
call cmake or make:

export PATH="/cygdrive/c/MinGW/bin:$PATH"
export INCLUDE="C:/MinGW/include;$INCLUDE"
export LIB="C:/MinGW/lib;$LIB"

3) Install MinGW :-)

http://garr.dl.sourceforge.net/sourceforge/mingw/MinGW-5.1.4.exe

4) You use the 'Unix Makefile Generator':

i.e: -G 'Unix Makefiles'

with the win32 version of cmake (not the cygwin version).

http://www.cmake.org/files/v2.6/cmake-2.6.2-win32-x86.exe

5) Here an example of the option given to cmake:

liburbi="$home/install/sdk-remote-1.5-mingw"
qt="c:/Qt/4.4.1mc"
prefix="$home/install/urbi-lab/mingw/d"
include_path="$qt/include;$liburbi/include;$openssl/include"
library_path="$qt/lib;$liburbi/lib;$openssl/lib"
program_path="$qt/bin;$openssl/bin"
prefix_path="$qt_ext;$lock_system;$openssl;$qt"
cmake="win-cmake.exe"
export CC="c:/MinGW/bin/gcc.exe"
export CXX="c:/MinGW/bin/g++.exe"
"$cmake" .. \
    -G 'Unix Makefiles' \
    -DCMAKE_VERBOSE_MAKEFILE=ON \
    -DCMAKE_INSTALL_PREFIX="$prefix" \
    -DCMAKE_INCLUDE_PATH="$include_path" \
    -DCMAKE_LIBRARY_PATH="$library_path" \
    -DCMAKE_PROGRAM_PATH="$program_path" \
    -DCMAKE_PREFIX_PATH="$prefix_path" \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_CXX_FLAGS="-W -Wall" \
    "$@"

6) You can use ccache.exe for windows:

* Directories

** modules

Holds cmake modules. See modules/README for further information about how to
write/use the provided modules.

* Version number, tags and branches policy

** Version number format:

Our version numbers can be of the following form:

- in master or candidates/* or perso/* branch:

  <major>.<minor>
  <major>.<minor>-RC-<rc>
  <major>.<minor>-<vendor>-<vendor_ver>
  <major>.<minor>-<vendor>-<vendor_ver>-RC-<rc>

- in <major>.<minor>.x branch:

  <major>.<minor>.<patch>
  <major>.<minor>.<patch>-RC-<rc>

- in <major>.<minor>-<vendor>-<vendor_ver>.x branch:

  <major>.<minor>-<vendor>-<vendor_ver>.<patch>
  <major>.<minor>-<vendor>-<vendor_ver>.<patch>-RC-<rc>

Nightly built release may have the following suffix (added by
git-describe(1)): <version>-<n>-<abbrev_sha1>

 where n: is the number of commit since the last release
       abbrev_sha1: is the first 8 char of the HEAD sha1 of the
       current branch.

** Legend:

 * major: The major version number. Indicates major version introducing
 backward incompatibility. Change it generally imply the development
 of a converter. <major> count starts at 1.
 * minor: The minor version number. Indicates minor version with
 backward compatibility. <minor> count starts at 0.
 * rc: The release candidate version number. Release of the form <foo>
 are optionally followed by one or several release candidate of the
 form <foo>-RC-<rc>. <rc> count starts at 1.
 * vendor: The name of the customer for whom the release as been
 done. It generally implies dedicated development owned by the
 customer and not by Gostai. For instance, the look'n feel, icons,
 packaging, etc are the customer's one. Most of the time we deliver a
 driver with source code licensed for the customer (because it pays
 for it) based on our libraries. Application for Gostai to not use the
 vendor field.
 * vendor_ver: The version number of the vendor release. It starts
 from 1. In case of several release for the same vendor based on the
 same version of our product we increment this version number. For
 instance, with urbiLab, we may have the following version sequence:

    1.6
    1.6-Customer-1
    1.6-Customer-2
    1.7
    1.7-Customer-1
 * patch: The patch version number is used when we have to patch an
 already released product because it includes a critical bug. Release
 including a patch field with a version number like this:
 <foo>.<patch> are made from a permanent branch called <foo>.x. The
 branching point with master is on the commit tagged by <foo>. Every
 other releases are made from the master branch which is supposed to
 be linear as advised by
 http://www.kernel.org/pub/software/scm/git/docs/user-manual.html
 in the "Why bisecting merge commits can be harder than bisecting
 linear history" section.

** Example:

Here the example of an history as shown by gitk --all:

 * branch: master; Add fifi
 |
 * Add blaop
 |
 * Add blop
 |
 | * branch: 1.2-Orange-1.x; Add bla2
 | |
 | * Add bla1
 |/
 * tag: 1.2-Orange-1; Add plou1
 |
 * Add plou
 |
 * tag: 1.2; branch: 1.2.x; Add to2.0again
 |
 * Add foo
 |
 * tag: 1.2-RC-1; Add to2.0
 |
 * tag: 1.1; branch: 1.1.x; Add tata
 |
 * Add toto
 |
 * Add bar
 |
 | * branch: 1.0.x: Add non
 | |
 | * Add oui
 | |
 | * tag: 1.0.1: Add test2
 | |
 | * Add test1
 |/
 * tag: 1.0; Add foo.

* End of this document.

Local Variables:
mode: outline
mode: flyspell
mode: auto-fill
End:

 LocalWords:  cmake README CMakeCache Gostai
