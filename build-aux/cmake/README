
		      # ====================== #
		      # cmake tools repository #
		      # ====================== #

* Introduction

This file describe how to use cmake to compile a project and the
organization of this directory. For further information about how to
write new modules for cmake see the README file in the modules directory.

* How to install cmake

You can either download a binary package or a source package from:

    http://www.cmake.org/HTML/Download.html

For the source package, follow the instruction in Readme.txt

* How to customize compilation flags

You can customize compilation flags either using the command line
arguments or tweaking the option using the GUI (cmake-gui). Note, that
at any time if you want to restart from the scratch you have to remove
the CMakeCache.txt file in your build directory.

** Source/Binary directory

The binary directory is the current path from where you start cmake. The source
directory is the first argument. Typically:

  $ mkdir _build
  $ cd _build
  $ cmake ..

** Generator

On Unix the best generator (and default one) is 'Unix Makefiles'. Use
-G to specify it. See cmake -h for the list of available generators.

Once cmake as finished run 'make' and 'make install'.

** Specify non standard library path

On Unix the most common way is to use CMAKE_PREFIX_PATH as it behaves more or
less like configure --with-PACKAGE. Add this option to cmake:

  -DCMAKE_PREFIX_PATH="prefix/to/lib1;prefix/to/lib2;prefix/to/lib3"

** Install prefix

The install prefix (equivalent to configure --prefix) is set using:

  -DCMAKE_INSTALL_PREFIX="path/where/to/install/urbiLive"

** Verbose mode

The verbose mode helps debugging your CMakeLists.txt files since cmake print
the whole command line it generates to build each target. Pass this option:

  -DCMAKE_VERBOSE_MAKEFILE=ON

** Extra CXX flags

Extra CXX flags are specified this way:

  -DCMAKE_CXX_FLAGS="-W -Wall -ggdb3 -fno-inline"

*** CXX flags and cl.exe (Visual C++ compiler)

Add to CMAKE_CXX_FLAGS:

  "/W4"     - Set warning level to 4 (default is 3)
  "/wd4127" - Disable warning 4127
  "/wd4512" - Disable warning 4512

And cl will issue all warnings enabled by default on other platforms
while still skipping many that would be raised in dependencies (e.g. Qt).

** Build type

You can choose your build type, debug or release, this way:

  -DCMAKE_BUILD_TYPE=Debug

** Options

Option to tweak the build of a given project are set using the
-DMYOPT=VAL arguments. Example

  -DENABLE_LOCKSYSTEM=OFF

* Platform/compiler specific setup

On some platform additionnal setup are required in order to call cmake in a
proper environment.

** cygwin/cl

In order to compile using Visual Studio compiler (cl.exe) from the cygwin
environment you have to make sure:

1) You use the following patch version of cygwin make:

http://www.cmake.org/files/cygwin/make.exe

2) Make sure you have the following environment variable set at the time you
call cmake or make:

export INCLUDE="C:\vcxx8\VC\PlatformSDK\INCLUDE;C:\vcxx8\VC\INCLUDE;"

export LIB="C:\vcxx8\VC\PlatformSDK\LIB;C:\vcxx8\VC\LIB;"

export LIBPATH="C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727;"

export PATH=/cygdrive/c/vcxx8/Common7/IDE:/cygdrive/c/vcxx8/VC/BIN:/cygdrive/c/vcxx8/Common7/Tools:/cygdrive/c/WINDOWS/Microsoft.NET/Framework/v2.0.50727:/cygdrive/c/vcxx8/VC/VCPackages:${PATH}

NOTE: vcxx8 is the installation directory of Visual Studio 2005.

3) You use the 'Unix Makefile Generator':

i.e: -G 'Unix Makefiles'

4) You have CC and CXX set properly when you call cmake:

export CC=cl
export CXX=cl

5) There is no conflicting /usr/bin/link.exe

6) You give windows style path to cmake. You are encourage to use cygpath to
   make the conversion.

7) You use the windows version of cmake.

Here the conf.sh file, I use for urbiLab:

myhome=$(cygpath -w "$HOME/despres")
liburbi=$(cygpath -w "$myhome/install/sdk-remote-1.5")
qt=$(cygpath -w "/cygdrive/c/Qt/4.4.1-com")
qt_ext=$(cygpath -w "$myhome/install/qt-ext/cygwin-cl")
prefix=$(cygpath -w "$myhome/install/urbi-lab/cygwin-cl")
include_path=$(cygpath -w "$liburbi/include;$qt_ext/include")
library_path=$(cygpath -w "$liburbi/lib;$qt_ext/lib")
program_path=$(cygpath -w "$qt/bin")
cmake="$HOME/share/cmake-2.6.1/win32_x86/bin/cmake.exe"
export CC=cl
export CXX=cl
"$cmake" .. \
    -G 'Unix Makefiles' \
    -DBUILDFARM=ON \
    -DCMAKE_VERBOSE_MAKEFILE=ON \
    -DCMAKE_INSTALL_PREFIX="$prefix" \
    -DCMAKE_INCLUDE_PATH="$include_path" \
    -DCMAKE_LIBRARY_PATH="$library_path" \
    -DCMAKE_PROGRAM_PATH="$program_path" \
    -DCMAKE_PREFIX_PATH="$qt_ext" \
    -DBUILD_TYPE=Relase \
    -DENABLE_LOCKSYSTEM=OFF \
    "$@"


NOTE: This setup has been tested with:
 - Visual Studio 2005 Express Editon
 - Microsoft .NET Framework 2.0 Service Pack 1

* Directories

** modules

Holds cmake modules. See modules/README for further information about how to
write/use the provided modules.

* End of this document.

Local Variables:
mode: outline
mode: flyspell
mode: auto-fill
End:

 LocalWords:  cmake README CMakeCache
