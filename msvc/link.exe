#! /bin/bash

# Wrapper to use Microsoft compiler and linker under wine with
# Autotools.

# TODO:
#
# - This does not support concurrency, at least I fear it does not
#   because ndbm does not.
#
# - a test suite :(  Many bugs were regularly introduced.
#
# - support link.exe -dump -symbols
#   currenty we do junk

set -e

trace ()
{
  case $VERBOSE in (x)
    set -x;;
  esac
}

trace

me=$(basename "$0")

stderr ()
{
  local i
  for i
  do
    echo >&2 "$me (wrapper): $i"
  done
}

run ()
{
  verbose "run: $*"
  "$@"
}

error ()
{
  local exit=$1
  shift
  stderr "$@"
  exit $exit
}

verbose ()
{
  case "$verbose: $VERBOSE " in
    (true:* | *" cl.exe "* | *" link.exe "* | " x ")
      stderr "$@"
      ;;
  esac
}

fatal ()
{
  error 1 "$@"
}

transform ()
{
  case $1 in
    ('') verbose "warning: empty argument passed to transform";;
    (/*) winepath -w "$1";;
    (*)  echo "$1";;
  esac
}

handle_lib ()
{
  # If $systemlibs is not defined, set it up.  It saves time (and
  # traces) to do it only on demand instead of always.
  test "${systemlibs+set}" = set ||
  {
    # The libs we produce are called libfoo.lib, whereas the system
    # libs are called foo.lib.
    # FIXME: Use external variables.  Need to find Boost and the like.
    local i
    local libdirs
    for i in                                    \
        "$HOME/local/usr/lib"                   \
        "$HOME/local"                           \
        "$VCXX_PATH/lib"                        \
        "$VCXX_PATH/PlatformSDK/Lib"
    do
      test ! -d $i ||
        libdirs+=" $i"
    done

    # On one line to make it easier to read set -x.
    systemlibs=$(find $libdirs -iname '*.lib' -exec basename {} ';' |
                  # We tried to keep the original case, but it was a
                  # PITA, since, at least in our environment, some
                  # libraries (ws2_32) as two different cases: WS2_32
                  # for Visual, and ws2_32 for mingw.  Keep it stupid
                  # simple.
                    tr A-Z a-z |
                    sort -u |
                    tr -d '\r' |
                    tr '\n' ' ')
    verbose "systemlibs=$systemlibs"
  }

  local base=$(echo "${1#-l}.lib" | tr A-Z a-z)
  local res
  # If $base is not in $systemlibs, prepend "lib".
  case " $systemlibs " in
    (*" $base "*) res=$base;;
    (*)           res=lib$base;;
  esac
  res=$(transform $res)
  verbose "handle_lib: $1 -> $res"
  echo "$res"
}

# append VARIABLE VALUES...
# -------------------------
# Append the VALUES to $VARIABLE, making sure it has all the needed
# escapes.  Separates with spaces.
append ()
{
  local var=$1
  shift
  local val
  for val
  do
    case $val in
      (*[''""\\\\\<\>\*\;\|]*)
        # We use printf to avoid backslash-interpolation.
        val='"'$(printf '%s' "$val" | sed -e 's/[''""\\\\]/\\&/g')'"'
        ;;
    esac
    # Avoid useless spaces.
    local sep
    case $var:$val in
        (*:|:*) sep=;;
        (*)     sep=' ';;
    esac
    eval "$var+=\$sep\$val"
  done
#  eval verbose "$var=\$$var"
}

# linkargs ARG...
# ---------------
# Append to $linkargs.
linkargs ()
{
  append linkargs "$@"
}

# outargs ARG...
# --------------
# Append to $outargs.
outargs ()
{
  append outargs "$@"
}

usage ()
{
   cat <<EOF
                         C/C++ COMPILER OPTIONS


                              -OPTIMIZATION-

/O1 minimize space                      /O2 maximize speed
/Ob<n> inline expansion (default n=0)   /Od disable optimizations (default)
/Og enable global optimization          /Oi[-] enable intrinsic functions
/Os favor code space                    /Ot favor code speed
/Ox maximum optimizations               /Oy[-] enable frame pointer omission

                             -CODE GENERATION-

/GF enable read-only string pooling     /Gm[-] enable minimal rebuild
/Gy[-] separate functions for linker    /GS[-] enable security checks
/GR[-] enable C++ RTTI                  /GX[-] enable C++ EH (same as /EHsc)
/EHs enable C++ EH (no SEH exceptions)  /EHa enable C++ EH (w/ SEH exceptions)
/EHc extern "C" defaults to nothrow
/fp:<except[-]|fast|precise|strict> choose floating-point model:
    except[-] - consider floating-point exceptions when generating code
    fast - "fast" floating-point model; results are less predictable
    precise - "precise" floating-point model; results are predictable
    strict - "strict" floating-point model (implies /fp:except)
/GL[-] enable link-time code generation /GA optimize for Windows Application
/Ge force stack checking for all funcs  /Gs[num] control stack checking calls
/Gh enable _penter function call        /GH enable _pexit function call
/GT generate fiber-safe TLS accesses    /RTC1 Enable fast checks (/RTCsu)
/RTCc Convert to smaller type checks    /RTCs Stack Frame runtime checking
/RTCu Uninitialized local usage checks
/clr[:option] compile for common language runtime, where option is:
    pure - produce IL-only output file (no native executable code)
    safe - produce IL-only verifiable output file
    oldSyntax - accept the Managed Extensions syntax from Visual C++ 2002/2003
    initialAppDomain - enable initial AppDomain behavior of Visual C++ 2002
    noAssembly - do not produce an assembly
/Gd __cdecl calling convention          /Gr __fastcall calling convention
/Gz __stdcall calling convention        /GZ Enable stack checks (/RTCs)
/QIfist[-] use FIST instead of ftol()
/hotpatch ensure function padding for hotpatchable images
/arch:<SSE|SSE2> minimum CPU architecture requirements, one of:
    SSE - enable use of instructions available with SSE enabled CPUs
    SSE2 - enable use of instructions available with SSE2 enabled CPUs

                              -OUTPUT FILES-

/Fa[file] name assembly listing file    /FA[scu] configure assembly listing
/Fd[file] name .PDB file                /Fe<file> name executable file
/Fm[file] name map file                 /Fo<file> name object file
/Fp<file> name precompiled header file  /Fr[file] name source browser file
/FR[file] name extended .SBR file
/doc[file] process XML documentation comments and optionally name the .xdc file

                              -PREPROCESSOR-

/AI<dir> add to assembly search path    /FU<file> forced using assembly/module
/C don't strip comments                 /D<name>{=|#}<text> define macro
/E preprocess to stdout                 /EP preprocess to stdout, no #line
/P preprocess to file                   /Fx merge injected code to file
/FI<file> name forced include file      /U<name> remove predefined macro
/u remove all predefined macros         /I<dir> add to include search path
/X ignore "standard places"

                                -LANGUAGE-

/Zi enable debugging information        /Z7 enable old-style debug info
/Zp[n] pack structs on n-byte boundary  /Za disable extensions
/Ze enable extensions (default)         /Zl omit default library name in .OBJ
/Zg generate function prototypes        /Zs syntax check only
/vd{0|1|2} disable/enable vtordisp      /vm<x> type of pointers to members
/Zc:arg1[,arg2] C++ language conformance, where arguments can be:
    forScope[-] - enforce Standard C++ for scoping rules
    wchar_t[-] - wchar_t is the native type, not a typedef
/ZI enable Edit and Continue debug info
/openmp enable OpenMP 2.0 language extensions

                              -MISCELLANEOUS-

@<file> options response file           /?, /help print this help message
/bigobj generate extended object format /c compile only, no link
/errorReport:option Report internal compiler errors to Microsoft
    none - do not send report
    prompt - prompt to immediately send report
    queue - at next admin logon, prompt to send report (default)
    send - send report automatically
/FC use full pathnames in diagnostics   /H<num> max external name length
/J default char type is unsigned        /nologo suppress copyright message
/showIncludes show include file names   /Tc<source file> compile file as .c
/Tp<source file> compile file as .cpp   /TC compile all files as .c
/TP compile all files as .cpp           /V<string> set version string
/w disable all warnings                 /wd<n> disable warning n
/we<n> treat warning n as an error      /wo<n> issue warning n once
/w<l><n> set warning level 1-4 for n    /W<n> set warning level (default n=1)
/Wall enable all warnings               /WL enable one line diagnostics
/WX treat warnings as errors            /Yc[file] create .PCH file
/Yd put debug info in every .OBJ        /Yl[sym] inject .PCH ref for debug lib
/Yu[file] use .PCH file                 /Y- disable all PCH options
/Zm<n> max memory alloc (% of default)  /Wp64 enable 64 bit porting warnings

                                -LINKING-

/LD Create .DLL                         /LDd Create .DLL debug library
/LN Create a .netmodule                 /F<num> set stack size
/link [linker options and libraries]    /MD link with MSVCRT.LIB
/MT link with LIBCMT.LIB                /MDd link with MSVCRTD.LIB debug lib
/MTd link with LIBCMTD.LIB debug lib


See also <URL:http://msdn.microsoft.com/en-us/library/fwkeyyhe.aspx>.
EOF
  exit 0
}

# This is mostly to please configure.
version ()
{
  cat <<EOF
MS VC++ wrapper.

EOF
  # Simply don't pass /nologo.
  # The version info is on stderr.
  $VCXX_BIN/cl.exe 2>&1 >/dev/null
  exit 0
}

# handle option -o
# ----------------
get_options__o ()
{
  output=$1
  case $mode:$output in
      (*:/dev/null) output=$tmp/discarded-output;;
      (:*.o|:*.obj) mode=compile;;
      (:*.i|:*.ii)  mode=preprocess;;
  esac
  # if echo $1 | grep -q .exe; then PROG=link.exe ; fi
}

get_options ()
{
  verbose "arguments: $*"
  while test $# -ne 0
  do
    case $1 in
    (--help) usage;;
    (--version) version;;
    (--verbose) verbose=true;;
    (-v) compiler_verbose=true;;

    # Libraries.
    (-link) ;;
    (-dll)  linkargs "/DLL";;
    (-L*)   linkargs -LIBPATH:$(transform ${1#-L});;
    (-L )   linkargs -LIBPATH:$(transform $2)     ; shift;;
    (-l*)   linkargs $(handle_lib $1);;

    # Preprocessor options.
    (-E)  mode=preprocess; outargs $1;;

    # Dependencies.
    # Automake invocations look like:
    #   $(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $<
    (-MT) # -MT DEPENDENCY-TARGET.
          shift
          deps_target=$1;;
    (-MD) # -MD triggers the generation of the dependencies.
          # The documentation says that this goes to stderr.  This is
          # not accurate: it goes to stderr if stdout is used for
          # actual output (e.g., -E without -o), otherwise it goes to
          # stdout.
          # FIXME: handle this case.
          outargs -showIncludes;;
    (-MP) # Add phony target for each dependency other than the main file.
          deps_phony=true;;
    (-MF) # -MF DEPENDENCY-FILE.
          shift
          deps_file=$1;;
    (--convert-windows-path)
          cppoutput=cppoutput;;

    (-c)  mode=compile; outargs $1;;
    (-o)  get_options__o "$2"; shift;;
    (-o*) get_options__o ${1#-o};;
    (-Wno-unused-parameter)
         # Flags passed by careless tools, such as Bjam.
        ;;
    (-Wno-inline)
        outargs -wd4710
        ;;
    (-g|-ggdb) ;; # outargs "-Zi";;

    # Optimizations.
    (-O2) outargs $1;;
    (-O3) outargs -Ox;;

    # Language selection.
    (-x) shift
      case $1 in
        (c) outargs "-TC";;
        (c++) outargs "-TP";;
      esac;;

    (*.lib) linkargs $(transform $1);;
    (*.a)   linkargs $(transform "$1" | sed -e 's/.a$/.lib/');;
    (*.dll)
      outargs $(transform "$1" | sed -re 's/(-[0-9]*)?.dll/.lib/');;

    # Sources.
    (-include)  shift; outargs "-FI$(transform $1)";;
    (*.S)       source=$1; outargs "-Tp$(transform $source)";;
    (*.c|*.cc)  source=$1; outargs    "$(transform $source)";;
    (*.i)       source=$1; outargs "-Tc$(transform $source)"
                preprocessed=true;;
    (*.ii)      source=$1; outargs "-Tp$(transform $source)"
                preprocessed=true;;
    (/dev/null) source=$tmp/null-input
                touch $source
                outargs "$(transform $source)";;
    # Unknown stuff.
    (*)        outargs $1;;
    esac
    shift
  done
}

dos2unix ()
{
  # Sed is easier to use than tr, which works on stdin only.
  sed -e 's/\r//' "$@"
}


# dump_log FILE
# -------------
# Process the $FILE which is the output from cl.exe.  Process the
# deps_file if requested.  Send to stderr what remains.
dump_log ()
{
  local file=$1
  verbose "processing log file $file"
  perl -e "my \$deps_file = '$deps_file';" \
       -e "my \$deps_phony = '$deps_phony';" \
       -e "my \$deps_target = '$deps_target';" \
       -e "my \$medir = '$medir';" \
       -e "my \$source = '$source';" \
       -e '
#! /usr/bin/perl

use Cwd (getcwd);
use English;
use Fcntl;   # For O_RDWR, O_CREAT, etc.
use File::Path (mkpath);
use NDBM_File;

# A hash table that saves from repeated calls to winepath.
# A significant improvement.
my %converted_path;

# A file into which we store the hash table.  Because NDBM does not
# support concurrent changes, it is pointless to use a single global
# cache.  Would be nice though.  Yet we do not leave this file in
# the current directory, as it results trailing files that all our
# "clean" rules should be educated to handle (including foreign
# packages such as libjpeg).  A useless burden.
my $cache_dir = "$medir/" . getcwd;
my $cache_file = "$cache_dir/winepath.cache";

if (! -d $cache_dir)
{
  mkpath $cache_dir
    or warn "cannot create $cache_dir";
}

tie(%converted_path, "NDBM_File", $cache_file, O_RDWR|O_CREAT, 0666)
  or warn "cannot tie NDBM file $cache_file: $!; aborting";

# Convert a set of paths from Windows to linux.
sub convert_path ($)
{
  my ($path) = @_;
  if (! defined $converted_path{$path})
  {
    # Do not convert files that do not need it, as it makes them
    # longer (from relative to absolute).
    #
    # Two different kinds of changes are needed.
    #
    # Absolute paths need to be handled by winepath.  Relative paths
    # should be kept relative so that Make can track dependencies
    # properly (Make does not like files addressed under different
    # names, such as absolute vs. relative).
    #
    # Unfortunately MSVC sometimes mixes forward- and backward-
    # slashes (if for instance you use forward slash in -Ifoo/bar, it
    # will use a backslash and result in "foo/bar\baz.h").  Since
    # apparently there is no problem with using slashes instead of
    # backslashes, let us first use only slashes.

    my $res = $path;
    # For some reason, the outcome looks like
    # "C:\\vcxx8\\VC\\INCLUDE\istream", with some backslashes escaped,
    # and not others.
    $res =~ s,\\\\?,/,g;
    if ($res =~ /^\w:/)
    {
      # Convert them to Linux format.
      $res = `winepath -u $res`;
      chomp $res;
    }
    $converted_path{$path} = $res;
  }
  return $converted_path{$path};
}

my %res;
while (<>)
{
  chop;
  s/\r$//;
  if ($INPUT_LINE_NUMBER == 1)
  {
     # For some (bad) reason, cl.exe dumps on STDOUT the name of the
     # file being compiled.  This makes ccache believe something went
     # wrong, in which case it does not cache.
     if (m/\.(c|cc|cpp|i|ii|S|o)$/)
     {
       print STDERR "Ignoring: {{{$_}}} which should be {{{$source}}}\n";
     }
     else
     {
       print STDERR "Unexpected output: {{{$_}}}\n";
     }
  }
  # cl : Command line warning D9024 : unrecognized source file type '"'"'FOO.o'"'"', object file assumed
  elsif (/Command line warning D9024 : unrecognized source file type '"'"'.*\.o'"'"'/)
  {
     # All is well.
  }
  # Note: including file: C:\\vcxx8\\VC\\INCLUDE\iostream
  # Note: including file:  C:\\vcxx8\\VC\\INCLUDE\istream
  elsif (s/Note: including file: *//)
  {
    $res{$_} = 1;
  }
  else
  {
    # Convert paths to ease debugging under Unix.
    s{^(\s*)([:\-\w\\\\/.]+)\((\d+)\)\s*:}
     {$1 . convert_path ($2) . ":$3:"}e;
    print STDERR "$_\n";
  }
}

# Generate the dependency.
if ($deps_file)
{
  my @files = map { convert_path($_) } sort keys %res;

  # Make does not like colons in file names, which is something that
  # does happen with cl.exe
  # (/home/build/.wine/dosdevices/c:/vcxx8/VC/include/stdio.h).
  # Escape them.
  @files = map { s/:/\\:/g; $_ } @files;

  use IO::File;
  my $deps = new IO::File ">$deps_file" or die;
  print $deps join ("\t\\\n  ", "$deps_target: $source", @files), "\n";

  if ($deps_phony)
  {
    map { print $deps "$_:\n\n"; } @files;
  }
}

untie(%converted_path);
' < $file
  ! $compiler_verbose ||
    compiler_verbose_message >&2
}


# The plan here is to help distcc-pump.  It relies on -v to get
# the list of the include directories.
#
# Gcc -v dumps the following:
#
# Using built-in specs.
# Target: i686-apple-darwin9
# Configured with: /var/tmp/gcc/gcc-5484~1/src/configure --disable-checking -enable-werror --prefix=/usr --mandir=/share/man --enable-languages=c,objc,c++,obj-c++ --program-transform-name=/^[cg][^.-]*$/s/$/-4.0/ --with-gxx-include-dir=/include/c++/4.0.0 --with-slibdir=/usr/lib --build=i686-apple-darwin9 --with-arch=apple --with-tune=generic --host=i686-apple-darwin9 --target=i686-apple-darwin9
# Thread model: posix
# gcc version 4.0.1 (Apple Inc. build 5484)
#  /usr/libexec/gcc/i686-apple-darwin9/4.0.1/cc1plus -quiet -v -D__DYNAMIC__ /dev/null -fPIC -quiet -dumpbase null -mmacosx-version-min=10.5.6 -mtune=generic -march=apple -auxbase-strip /dev/null -version -D__private_extern__=extern -o /var/folders/hy/hy4Qz3qs2RWPcU+8ZQWaqU+++TI/-Tmp-//cczPgOv5.s
# ignoring nonexistent directory "/usr/lib/gcc/i686-apple-darwin9/4.0.1/../../../../i686-apple-darwin9/include"
# #include "..." search starts here:
# #include <...> search starts here:
#  /usr/include/c++/4.0.0
#  /usr/include/c++/4.0.0/i686-apple-darwin9
#  /usr/include/c++/4.0.0/backward
#  /usr/local/include
#  /usr/lib/gcc/i686-apple-darwin9/4.0.1/include
#  /usr/include
#  /System/Library/Frameworks (framework directory)
#  /Library/Frameworks (framework directory)
# End of search list.
# GNU C++ version 4.0.1 (Apple Inc. build 5484) (i686-apple-darwin9)
#	compiled by GNU C version 4.0.1 (Apple Inc. build 5484).
# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# Compiler executable checksum: 26a07d3b4fce49bea6ac55e876df1aa9
#  /usr/libexec/gcc/i686-apple-darwin9/4.0.1/as -arch i386 -force_cpusubtype_ALL -o /dev/null /var/folders/hy/hy4Qz3qs2RWPcU+8ZQWaqU+++TI/-Tmp-//cczPgOv5.s
compiler_verbose_message ()
{
  perl -e '
    print "#include \"...\" search starts here:\n";
    print "#include <...> search starts here:\n";
    for my $d (split (";", $ENV{"INCLUDE"}))
    {
      print " " . `winepath -u $d`;
    }
    print "End of search list.\n";
'
}

# Look for, and load, `msvc_env.sh'.
load_msvc_env ()
{
  local i
  # Skip if we can't run it.
  for i in ~/share/wine ~/.wine/drive_c
  do
    local f=$i/msvc_env.sh
    verbose "trying to load $f"
    if test -f $f; then
      . $f
      verbose "loaded $f"
      return 0
    fi
  done
  return 1
}


## ------ ##
## Main.  ##
## ------ ##

# Make it easier use under a regular host.
case $1 in
  (--help) usage;;
esac

PROG=$me

: ${TMPDIR=/tmp}
medir=$TMPDIR/$me.dir
tmp=$medir/$$
case $VERBOSE in
  (x) ;;
  (*) trap "exit=\$?; rm -rf $tmp; exit \$exit" 0;;
esac
mkdir -p $tmp
stdout=$tmp/stdout
stderr=$tmp/stderr

test -n "$VCINSTALLDIR" ||
  load_msvc_env ||
  error 176 "cannot load msvc_env.sh"

winepath --version >/dev/null 2>&1 ||
  error 176 "cannot run winepath"

VCXX_PATH=$(winepath -u $VCINSTALLDIR)
VCXX_BIN=$VCXX_PATH/bin

test -x $VCXX_BIN/cl.exe ||
  error 176 "cl.exe not found in $VCXX_BIN"

outargs=-MD
case $PROG in
  (cl.exe) outargs "-nologo" "-EHsc";;
esac

# Compiler verbosity (-v).
compiler_verbose=false
# The program/function used to dump the result of CPP.
# cppoutput=cppoutput to convert #lines from Windows to Unix file
# names (this is needed to depcomp).
cppoutput=dos2unix
# File containing the dependencies.
deps_file=
# Target of the dependencies (i.e., lhs in the make rule).
deps_target=
deps_phony=false
linkargs=
# mode=compile|link|preprocess
mode=
# Output file name.
output=
# Whether the source was already preprocessed (i.e., *.i or *.ii).
preprocessed=false
source=
# Wrapper verbosity.
verbose=false

get_options "$@"

case $mode in
  (compile)
    # -c without -o.
    test -n "$output" ||
      output=$(basename "$source" | sed -re 's/\.[^.]+$/.obj/')
    outargs -Fo$(transform $output);;
  (preprocess)  ;;
  (*) # Probably linking.
    mode=link
    case $PROG in
      (link.exe) outargs -OUT:$(transform $output);;
      (*)        outargs -Fe$(transform $output);;
    esac
    linkargs "-SUBSYSTEM:console" "-MANIFEST" "Kernel32.Lib"
    ;;
esac

if test "$PROG" = cl.exe && test -n "$linkargs"; then
#  test -z "$mode"
#  mode=link
  outargs "-link" $linkargs
  linkargs=
fi

verbose "mode: $mode"

# Shell tracing must not be activate here, otherwise shell traces
# will be included in stderr.
cmd="\"$VCXX_BIN/$PROG\" $outargs $linkargs"
verbose "Running: $cmd"
set +x +e
eval "$cmd" >$stdout 2>$stderr
status=$?
trace
set -e

# If we are fed with a preprocessed input, do not generate the
# deps_file.  This is needed by ccache, and anyway, this is just
# logical: it is the preprocessor that knows the #includes, the
# compiler knows nothing.
! $preprocessed ||
  deps_file=

# In cpp mode (/E), vc produces on stdout.  Honor -o.  Beware that
# output is the output of the script, not of the compiler.  When the
# compiler outputs to stdout, the logs are in stderr.  Otherwise the
# logs are on stdout.  Put everything on stderr, this is more
# Unix-style.
case $mode:$output in
  (preprocess:)
     dump_log $stderr
     $cppoutput <$stdout;;
  (preprocess:*)
     dump_log $stderr
     $cppoutput <$stdout >$(transform $output);;
  (*:)
     dump_log $stderr
     dos2unix $stdout >&2;;
  (*:*)
     dos2unix $stderr >&2
     dump_log $stdout;;
esac

test $status = 0 ||
  exit $status

#embed manifest
#if echo $output | egrep -q '(exe|dll)$'; then
#  $VCXX_BIN/mt.exe -manifest "$(transform $output.manifest)" -outputresource:"$(transform $output);1"
#  rm "$output.manifest"
#fi

# embed manifest by compiling it into a resource to avoid mt.exe crash with
# -outputresource when using Wine
# Following procedure described at:
# http://msdn.microsoft.com/fr-fr/library/ms235591.aspx
case $output in
  (*.exe|*.dll)
  #$VCXX_BIN/mt.exe -manifest "$(transform $output).manifest" "-out:$(transform $output).auto.manifest"
  # Escape quotes
  sed -e 's/"/""/g' < "$output.manifest" > "$output.escaped.manifest"
  cat >"$output.auto.rc" <<EOF
#include <winuser.h>
1 RT_MANIFEST {"$(cat $output.escaped.manifest)"}
EOF
  run $VCXX_BIN/rc.exe -r "$(transform $output).auto.rc"
  eval run "$VCXX_BIN/$PROG $outargs $linkargs \"$(transform $output).auto.RES\""
  rm -f "$output".{auto.{manifest,rc,RES},{escaped,intermediate}.manifest,manifest}
  ;;
esac

# Rename .lib with a versioned name.
case $output in
 (*-[0-9.]*.dll)
  libname=$(echo $output | sed -e 's/dll$/lib/')
  if test -f "$libname"; then
    run mv -f $libname $(echo $output | sed -re 's/-[0-9.]+\.dll/.lib/')
  fi
  ;;
esac

exit 0
