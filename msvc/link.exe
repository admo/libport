#! /bin/bash

# Wrapper to use Microsoft compiler and linker under wine with
# Autotools.

# TODO:
# - a test suite :(  Many bugs were regularly introduced.
# - support link.exe -dump -symbols
#   currenty we do junk

set -e

case $VERBOSE in (x)
  set -x;;
esac

me=$(basename "$0")

stderr ()
{
  local i
  for i
  do
    echo >&2 "$me: $i"
  done
}

run ()
{
  verbose "run: $*"
  "$@"
}

error ()
{
  local exit=$1
  shift
  stderr "$@"
  exit $exit
}

verbose ()
{
  case " $VERBOSE " in
    (*" cl.exe "*|*" link.exe "*|" x ")
      stderr "$@"
      ;;
  esac
}

fatal ()
{
  error 1 "$@"
}

transform ()
{
  case $1 in
    (/*) winepath -w "$1";;
    (*)  echo "$1";;
  esac
}

handle_lib ()
{
  # If $systemlibs is not defined, set it up.  It saves time (and
  # traces) to do it only on demand instead of always.
  test "${systemlibs+set}" = set ||
  {
    # The libs we produce are called libfoo.lib, whereas the system
    # libs are called foo.lib.
    local lib_dirs="$HOME/.wine/winroot/boost_1_35_0/lib"
    lib_dirs+=" $VCXX_PATH/lib"
    lib_dirs+=" $VCXX_PATH/PlatformSDK/Lib"
    # On one line to make it easier to read set -x.
    systemlibs=$(find $lib_dirs -iname '*.lib' -exec basename {} ';' |
                    tr A-Z a-z |
                    sort -u |
                    tr -d '\r' |
                    tr '\n' ' ')
  }

  local base=${1#-l}.lib
  local res
  # If $base is not in $systemlibs, prepend "lib".
  case " $systemlibs " in
    (*" $base "*) res=$base;;
    (*)           res=lib$base;;
  esac
  res=$(transform $res)
  verbose "handle_lib: $1 -> $res"
  echo "$res"
}

# append VARIABLE VALUES...
# -------------------------
# Append the VALUES to $VARIABLE, making sure it has all the needed
# escapes.  Separates with spaces.
append ()
{
  local var=$1
  shift
  local val
  for val
  do
    case $val in
      (*[''""\\\\\<\>\*\;\|]*)
        # We use printf to avoid backslash-interpolation.
        val='"'$(printf '%s' "$val" | sed -e 's/[''""\\\\]/\\&/g')'"'
        ;;
    esac
    # Avoid useless spaces.
    local sep
    case $var:$val in
        (*:|:*) sep=;;
        (*)     sep=' ';;
    esac
    eval "$var+=\$sep\$val"
  done
#  eval verbose "$var=\$$var"
}

# linkargs ARG...
# ---------------
# Append to $linkargs.
linkargs ()
{
  append linkargs "$@"
}

# outargs ARG...
# --------------
# Append to $outargs.
outargs ()
{
  append outargs "$@"
}

usage ()
{
   cat <<EOF
                         C/C++ COMPILER OPTIONS


                              -OPTIMIZATION-

/O1 minimize space                      /O2 maximize speed
/Ob<n> inline expansion (default n=0)   /Od disable optimizations (default)
/Og enable global optimization          /Oi[-] enable intrinsic functions
/Os favor code space                    /Ot favor code speed
/Ox maximum optimizations               /Oy[-] enable frame pointer omission

                             -CODE GENERATION-

/GF enable read-only string pooling     /Gm[-] enable minimal rebuild
/Gy[-] separate functions for linker    /GS[-] enable security checks
/GR[-] enable C++ RTTI                  /GX[-] enable C++ EH (same as /EHsc)
/EHs enable C++ EH (no SEH exceptions)  /EHa enable C++ EH (w/ SEH exceptions)
/EHc extern "C" defaults to nothrow
/fp:<except[-]|fast|precise|strict> choose floating-point model:
    except[-] - consider floating-point exceptions when generating code
    fast - "fast" floating-point model; results are less predictable
    precise - "precise" floating-point model; results are predictable
    strict - "strict" floating-point model (implies /fp:except)
/GL[-] enable link-time code generation /GA optimize for Windows Application
/Ge force stack checking for all funcs  /Gs[num] control stack checking calls
/Gh enable _penter function call        /GH enable _pexit function call
/GT generate fiber-safe TLS accesses    /RTC1 Enable fast checks (/RTCsu)
/RTCc Convert to smaller type checks    /RTCs Stack Frame runtime checking
/RTCu Uninitialized local usage checks
/clr[:option] compile for common language runtime, where option is:
    pure - produce IL-only output file (no native executable code)
    safe - produce IL-only verifiable output file
    oldSyntax - accept the Managed Extensions syntax from Visual C++ 2002/2003
    initialAppDomain - enable initial AppDomain behavior of Visual C++ 2002
    noAssembly - do not produce an assembly
/Gd __cdecl calling convention          /Gr __fastcall calling convention
/Gz __stdcall calling convention        /GZ Enable stack checks (/RTCs)
/QIfist[-] use FIST instead of ftol()
/hotpatch ensure function padding for hotpatchable images
/arch:<SSE|SSE2> minimum CPU architecture requirements, one of:
    SSE - enable use of instructions available with SSE enabled CPUs
    SSE2 - enable use of instructions available with SSE2 enabled CPUs

                              -OUTPUT FILES-

/Fa[file] name assembly listing file    /FA[scu] configure assembly listing
/Fd[file] name .PDB file                /Fe<file> name executable file
/Fm[file] name map file                 /Fo<file> name object file
/Fp<file> name precompiled header file  /Fr[file] name source browser file
/FR[file] name extended .SBR file
/doc[file] process XML documentation comments and optionally name the .xdc file

                              -PREPROCESSOR-

/AI<dir> add to assembly search path    /FU<file> forced using assembly/module
/C don't strip comments                 /D<name>{=|#}<text> define macro
/E preprocess to stdout                 /EP preprocess to stdout, no #line
/P preprocess to file                   /Fx merge injected code to file
/FI<file> name forced include file      /U<name> remove predefined macro
/u remove all predefined macros         /I<dir> add to include search path
/X ignore "standard places"

                                -LANGUAGE-

/Zi enable debugging information        /Z7 enable old-style debug info
/Zp[n] pack structs on n-byte boundary  /Za disable extensions
/Ze enable extensions (default)         /Zl omit default library name in .OBJ
/Zg generate function prototypes        /Zs syntax check only
/vd{0|1|2} disable/enable vtordisp      /vm<x> type of pointers to members
/Zc:arg1[,arg2] C++ language conformance, where arguments can be:
    forScope[-] - enforce Standard C++ for scoping rules
    wchar_t[-] - wchar_t is the native type, not a typedef
/ZI enable Edit and Continue debug info
/openmp enable OpenMP 2.0 language extensions

                              -MISCELLANEOUS-

@<file> options response file           /?, /help print this help message
/bigobj generate extended object format /c compile only, no link
/errorReport:option Report internal compiler errors to Microsoft
    none - do not send report
    prompt - prompt to immediately send report
    queue - at next admin logon, prompt to send report (default)
    send - send report automatically
/FC use full pathnames in diagnostics   /H<num> max external name length
/J default char type is unsigned        /nologo suppress copyright message
/showIncludes show include file names   /Tc<source file> compile file as .c
/Tp<source file> compile file as .cpp   /TC compile all files as .c
/TP compile all files as .cpp           /V<string> set version string
/w disable all warnings                 /wd<n> disable warning n
/we<n> treat warning n as an error      /wo<n> issue warning n once
/w<l><n> set warning level 1-4 for n    /W<n> set warning level (default n=1)
/Wall enable all warnings               /WL enable one line diagnostics
/WX treat warnings as errors            /Yc[file] create .PCH file
/Yd put debug info in every .OBJ        /Yl[sym] inject .PCH ref for debug lib
/Yu[file] use .PCH file                 /Y- disable all PCH options
/Zm<n> max memory alloc (% of default)  /Wp64 enable 64 bit porting warnings

                                -LINKING-

/LD Create .DLL                         /LDd Create .DLL debug library
/LN Create a .netmodule                 /F<num> set stack size
/link [linker options and libraries]    /MD link with MSVCRT.LIB
/MT link with LIBCMT.LIB                /MDd link with MSVCRTD.LIB debug lib
/MTd link with LIBCMTD.LIB debug lib


See also <URL:http://msdn.microsoft.com/en-us/library/fwkeyyhe.aspx>.
EOF
  exit 0
}

get_options ()
{
  verbose "arguments: $*"
  while test $# -ne 0
  do
    local opt=$1
    case $1 in
    (--help) usage;;
    (-link) ;;
    (-dll)  linkargs "/DLL" ;;
    (-L*)   linkargs /LIBPATH:$(transform ${1#-L}) ;;
    (-l*)   linkargs $(handle_lib $1) ;;
    (*.lib) linkargs $(transform $1) ;;
    (*.a)   linkargs $(transform "$1" | sed -e 's/.a$/.lib/');;
    (-E)  mode=preprocess; outargs /E ;;
    (-c)  mode=compile; outargs /c ;;
    (-o)  shift
         output=$1
         case $mode:$output in
             (:*.o|:*.obj) mode=compile;;
             (:*.i|:*.ii)  mode=preprocess;;
         esac
         # if echo $1 | grep -q .exe; then PROG=link.exe ; fi
        ;;
    (-Wno-unused-parameter) ;;
    (-g|-ggdb) ;; # outargs "/Zi";;
    (-O2|-O3) outargs /O2;;
    (-f*)  ;;
    (*.dll)
      outargs $(transform "$1" | sed -re 's/(-[0-9]*)?.dll/.lib/');;
    (*.S)  outargs "/Tp$(transform $1)";;
    (*.c|*.cc) outargs "$(transform $1)"; source=$1  ;;
    (*.i) outargs "/Tc$(transform $1)"; source=$1  ;;
    (*.ii) outargs "/Tp$(transform $1)"; source=$1  ;;
    (*)  outargs $1;;
    esac
    shift
  done
}

dos2unix ()
{
  # Sed is easier to use than tr, which works on stdin only.
  sed -e 's/\r//' "$@"
}

# Make it easier use under a regular host.
case $1 in
  (--help) usage;;
esac

PROG=$me

: ${TMPDIR=/tmp}
tmp=$TMPDIR/$me/$$
# trap "exit=\$?; rm -rf $tmp; exit \$exit" 0
mkdir -p $tmp
stdout=$tmp/stdout
stderr=$tmp/stderr

VCXX_PATH=$(winepath -u $VCINSTALLDIR)
VCXX_BIN=$VCXX_PATH/bin

if ! test -x $VCXX_BIN/cl.exe; then
  fatal "cl.exe not found in $VCXX_BIN"
fi

outargs=/MD
case $PROG in
  (cl.exe) outargs "/nologo" "/EHsc";;
esac

linkargs=
# mode=compile|link|preprocess
mode=
source=
# Output file name.
output=

get_options "$@"

case $mode in
  (compile)
    # -c with -o.
    test -n "$output" ||
      output=$(basename "$source" | sed -re 's/\.[^.]+$/.obj/')
    outargs /Fo$(transform $output);;
  (preprocess)  ;;
  (*) # Probably linking.
    mode=link
    case $PROG in
      (link.exe) outargs /OUT:$(transform $output);;
      (*)        outargs /Fe$(transform $output);;
    esac
    linkargs "/SUBSYSTEM:console" "/MANIFEST" "kernel32.lib"
    ;;
esac

if test "$PROG" = cl.exe && test -n "$linkargs"; then
#  test -z "$mode"
#  mode=link
  outargs "/link" $linkargs
  linkargs=
fi

verbose "mode: $mode"

if eval "run \"$VCXX_BIN/$PROG\" $outargs $linkargs" >$stdout 2>$stderr; then
  status=$?
  # Clear the \r from stderr, they are a nuisance for buildbot and
  # Emacs.
  dos2unix $stderr >&2
  # In cpp mode (/E), vc produces on stdout.  Honor -o.
  case $mode:$output in
    (preprocess:)  cppoutput <$stdout;;
    (preprocess:*) cppoutput <$stdout >$(transform $output);;
    (*)            dos2unix $stdout;;
  esac
else
  status=$?
  # Clear the \r from stderr, they are a nuisance for buildbot and
  # Emacs.
  dos2unix $stderr >&2
  dos2unix $stdout
  exit $status
fi

#embed manifest
#if echo $output | egrep -q '(exe|dll)$'; then
#  $VCXX_BIN/mt.exe -manifest "$(transform $output.manifest)" -outputresource:"$(transform $output);1"
#  rm "$output.manifest"
#fi

# embed manifest by compiling it into a resource to avoid mt.exe crash with
# -outputresource when using Wine
# Following procedure described at:
# http://msdn.microsoft.com/fr-fr/library/ms235591.aspx
case $output in
  (*exe|*dll)
  #$VCXX_BIN/mt.exe -manifest "$(transform $output).manifest" "-out:$(transform $output).auto.manifest"
  # Escape quotes
  sed -e 's/"/""/g' < "$output.manifest" > "$output.escaped.manifest"
  cat > "$output.auto.rc" << __EOF__
#include <winuser.h>
1 RT_MANIFEST {"$(cat $output.escaped.manifest)"}
__EOF__
  run $VCXX_BIN/rc.exe /r "$(transform $output).auto.rc"
  eval run "$VCXX_BIN/$PROG $outargs $linkargs \"$(transform $output).auto.RES\""
  ;;
esac

# Rename .lib with a versioned name.
case $output in
 (*-[0-9.]*.dll)
  libname=$(echo $output | sed -e 's/dll$/lib/')
  if test -f "$libname"; then
    run mv -f $libname $(echo $output | sed -re 's/-[0-9.]+\.dll/.lib/')
  fi
  ;;
esac
